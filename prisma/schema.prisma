datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  member
  moderator
  admin
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now()) @map("created_at")
  deleted_at DateTime? @map("deleted_at")
  posts      Post[]

  @@map("categories")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  content      String
  created_at   DateTime  @default(now()) @map("created_at")
  published_at DateTime? @map("published_at")
  deleted_at   DateTime? @map("deleted_at")
  category_id  Int       @map("category_id")
  category     Category  @relation(fields: [category_id], references: [id])
  comments     Comment[]
  tags         PostTag[]

  user_id Int?  @map("user_id")
  user    User? @relation(fields: [user_id], references: [id])

  @@map("posts")
}

model Comment {
  id             Int       @id @default(autoincrement())
  content        String
  commenter_name String    @map("commenter_name")
  created_at     DateTime  @default(now()) @map("created_at")
  deleted_at     DateTime? @map("deleted_at") 
  post_id        Int       @map("post_id")
  post           Post      @relation(fields: [post_id], references: [id])
  user_id        Int?      @map("user_id")
  user           User?     @relation(fields: [user_id], references: [id])

  @@map("comments")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostTag {
  post_id Int  @map("post_id")
  post    Post @relation(fields: [post_id], references: [id])
  tag_id  Int  @map("tag_id")
  tag     Tag  @relation(fields: [tag_id], references: [id])

  @@id([post_id, tag_id])
  @@map("posts_tags")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  username        String         @unique
  hashed_password String         @map("hashed_password")
  role            Role           @default(member)
  created_at      DateTime       @default(now()) @map("created_at")
  deleted_at      DateTime?      @map("deleted_at")
  posts           Post[]
  comments        Comment[]
  refresh_tokens  RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt @map("updated_at")
  expires_at DateTime  @map("expires_at")
  revoked_at DateTime? @map("revoked_at")
  user_id    Int       @map("user_id")
  user       User      @relation(fields: [user_id], references: [id])

  @@map("refresh_tokens")
}

model RevokedToken {
  jti        String   @id @unique
  expires_at DateTime @map("expires_at")

  @@map("revoked_tokens")
}
